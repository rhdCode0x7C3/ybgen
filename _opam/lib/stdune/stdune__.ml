(* generated by dune *)

(** @canonical Stdune.Ansi_color *)
module Ansi_color = Stdune__Ansi_color

(** @canonical Stdune.Appendable_list *)
module Appendable_list = Stdune__Appendable_list

(** @canonical Stdune.Applicative *)
module Applicative = Stdune__Applicative

(** @canonical Stdune.Applicative_intf *)
module Applicative_intf = Stdune__Applicative_intf

(** @canonical Stdune.Array *)
module Array = Stdune__Array

(** @canonical Stdune.Bin *)
module Bin = Stdune__Bin

(** @canonical Stdune.Bit_set *)
module Bit_set = Stdune__Bit_set

(** @canonical Stdune.Bool *)
module Bool = Stdune__Bool

(** @canonical Stdune.Bytes *)
module Bytes = Stdune__Bytes

(** @canonical Stdune.Bytes_unit *)
module Bytes_unit = Stdune__Bytes_unit

(** @canonical Stdune.Caller_id *)
module Caller_id = Stdune__Caller_id

(** @canonical Stdune.Char *)
module Char = Stdune__Char

(** @canonical Stdune.Code_error *)
module Code_error = Stdune__Code_error

(** @canonical Stdune.Compact_position *)
module Compact_position = Stdune__Compact_position

(** @canonical Stdune.Comparable *)
module Comparable = Stdune__Comparable

(** @canonical Stdune.Comparable_intf *)
module Comparable_intf = Stdune__Comparable_intf

(** @canonical Stdune.Comparator *)
module Comparator = Stdune__Comparator

(** @canonical Stdune.Dev_null *)
module Dev_null = Stdune__Dev_null

(** @canonical Stdune.Dune_either *)
module Dune_either = Stdune__Dune_either

(** @canonical Stdune.Either *)
module Either = Stdune__Either

(** @canonical Stdune.Env *)
module Env = Stdune__Env

(** @canonical Stdune.Env_path *)
module Env_path = Stdune__Env_path

(** @canonical Stdune.Escape *)
module Escape = Stdune__Escape

(** @canonical Stdune.Exn *)
module Exn = Stdune__Exn

(** @canonical Stdune.Exn_with_backtrace *)
module Exn_with_backtrace = Stdune__Exn_with_backtrace

(** @canonical Stdune.Fdecl *)
module Fdecl = Stdune__Fdecl

(** @canonical Stdune.Filename *)
module Filename = Stdune__Filename

(** @canonical Stdune.Filename_set *)
module Filename_set = Stdune__Filename_set

(** @canonical Stdune.Float *)
module Float = Stdune__Float

(** @canonical Stdune.Format *)
module Format = Stdune__Format

(** @canonical Stdune.Fpath *)
module Fpath = Stdune__Fpath

(** @canonical Stdune.Hashable *)
module Hashable = Stdune__Hashable

(** @canonical Stdune.Hashtbl *)
module Hashtbl = Stdune__Hashtbl

(** @canonical Stdune.Hashtbl_intf *)
module Hashtbl_intf = Stdune__Hashtbl_intf

(** @canonical Stdune.Id *)
module Id = Stdune__Id

(** @canonical Stdune.Int *)
module Int = Stdune__Int

(** @canonical Stdune.Io *)
module Io = Stdune__Io

(** @canonical Stdune.Io_intf *)
module Io_intf = Stdune__Io_intf

(** @canonical Stdune.Lazy *)
module Lazy = Stdune__Lazy

(** @canonical Stdune.Lexbuf *)
module Lexbuf = Stdune__Lexbuf

(** @canonical Stdune.List *)
module List = Stdune__List

(** @canonical Stdune.Loc *)
module Loc = Stdune__Loc

(** @canonical Stdune.Loc0 *)
module Loc0 = Stdune__Loc0

(** @canonical Stdune.Map *)
module Map = Stdune__Map

(** @canonical Stdune.Map_intf *)
module Map_intf = Stdune__Map_intf

(** @canonical Stdune.Monad *)
module Monad = Stdune__Monad

(** @canonical Stdune.Monad_intf *)
module Monad_intf = Stdune__Monad_intf

(** @canonical Stdune.Monoid *)
module Monoid = Stdune__Monoid

(** @canonical Stdune.Monoid_intf *)
module Monoid_intf = Stdune__Monoid_intf

(** @canonical Stdune.Nonempty_list *)
module Nonempty_list = Stdune__Nonempty_list

(** @canonical Stdune.Nothing *)
module Nothing = Stdune__Nothing

(** @canonical Stdune.Option *)
module Option = Stdune__Option

(** @canonical Stdune.Or_exn *)
module Or_exn = Stdune__Or_exn

(** @canonical Stdune.Path *)
module Path = Stdune__Path

(** @canonical Stdune.Path_intf *)
module Path_intf = Stdune__Path_intf

(** @canonical Stdune.Per_item *)
module Per_item = Stdune__Per_item

(** @canonical Stdune.Per_item_intf *)
module Per_item_intf = Stdune__Per_item_intf

(** @canonical Stdune.Pid *)
module Pid = Stdune__Pid

(** @canonical Stdune.Platform *)
module Platform = Stdune__Platform

(** @canonical Stdune.Poly *)
module Poly = Stdune__Poly

(** @canonical Stdune.Predicate *)
module Predicate = Stdune__Predicate

(** @canonical Stdune.Proc *)
module Proc = Stdune__Proc

(** @canonical Stdune.Queue *)
module Queue = Stdune__Queue

(** @canonical Stdune.Result *)
module Result = Stdune__Result

(** @canonical Stdune.Scanf *)
module Scanf = Stdune__Scanf

(** @canonical Stdune.Seq *)
module Seq = Stdune__Seq

(** @canonical Stdune.Set *)
module Set = Stdune__Set

(** @canonical Stdune.Set_intf *)
module Set_intf = Stdune__Set_intf

(** @canonical Stdune.Sexp *)
module Sexp = Stdune__Sexp

(** @canonical Stdune.Signal *)
module Signal = Stdune__Signal

(** @canonical Stdune.Staged *)
module Staged = Stdune__Staged

(** @canonical Stdune.State *)
module State = Stdune__State

(** @canonical Stdune.String *)
module String = Stdune__String

(** @canonical Stdune.String_builder *)
module String_builder = Stdune__String_builder

(** @canonical Stdune.String_split *)
module String_split = Stdune__String_split

(** @canonical Stdune.Sys *)
module Sys = Stdune__Sys

(** @canonical Stdune.Table *)
module Table = Stdune__Table

(** @canonical Stdune.Temp *)
module Temp = Stdune__Temp

(** @canonical Stdune.Top_closure *)
module Top_closure = Stdune__Top_closure

(** @canonical Stdune.Top_closure_intf *)
module Top_closure_intf = Stdune__Top_closure_intf

(** @canonical Stdune.Tuple *)
module Tuple = Stdune__Tuple

(** @canonical Stdune.Type_eq *)
module Type_eq = Stdune__Type_eq

(** @canonical Stdune.Unit *)
module Unit = Stdune__Unit

(** @canonical Stdune.Univ_map *)
module Univ_map = Stdune__Univ_map

(** @canonical Stdune.Univ_map_intf *)
module Univ_map_intf = Stdune__Univ_map_intf

(** @canonical Stdune.User_error *)
module User_error = Stdune__User_error

(** @canonical Stdune.User_message *)
module User_message = Stdune__User_message

(** @canonical Stdune.User_warning *)
module User_warning = Stdune__User_warning

module Stdune__ = struct end
[@@deprecated "this module is shadowed"]
